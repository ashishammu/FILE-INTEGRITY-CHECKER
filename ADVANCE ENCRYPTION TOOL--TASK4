FILE STRUCTURE----
aes_tool/
â”œâ”€â”€ main.py
â”œâ”€â”€ crypto_engine.py
â””â”€â”€Â README.md 

CRYPTO_ENGINE.PY---
import os
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

def derive_key(password: str, salt: bytes) -> bytes:
    """Derive a 256-bit AES key from the password and salt."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100_000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

def encrypt_file(input_path: str, password: str, output_path: str = None):
    salt = os.urandom(16)
    key = derive_key(password, salt)
    iv = os.urandom(16)

    if not output_path:
        output_path = input_path + ".enc"

    with open(input_path, 'rb') as f:
        plaintext = f.read()

    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(plaintext) + encryptor.finalize()

    with open(output_path, 'wb') as f:
        f.write(salt + iv + ciphertext)

    print(f"[+] File encrypted: {output_path}")

def decrypt_file(encrypted_path: str, password: str, output_path: str = None):
    with open(encrypted_path, 'rb') as f:
        data = f.read()

    salt = data[:16]
    iv = data[16:32]
    ciphertext = data[32:]
    key = derive_key(password, salt)

    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()

    if not output_path:
        output_path = encrypted_path.replace('.enc', '.dec')

    with open(output_path, 'wb') as f:
        f.write(plaintext)

    print(f"[+] File decrypted:Â {output_path}")

MAIN.PY--
import argparse
from crypto_engine import encrypt_file, decrypt_file

def main():
    parser = argparse.ArgumentParser(description="AES-256 File Encryptor")
    parser.add_argument("mode", choices=["encrypt", "decrypt"], help="Mode to run: encrypt or decrypt")
    parser.add_argument("file", help="Path to the input file")
    parser.add_argument("-o", "--output", help="Output file path")
    parser.add_argument("-p", "--password", help="Password for encryption/decryption")

    args = parser.parse_args()

    if not args.password:
        import getpass
        args.password = getpass.getpass("Enter password: ")

    try:
        if args.mode == "encrypt":
            encrypt_file(args.file, args.password, args.output)
        else:
            decrypt_file(args.file, args.password, args.output)
    except Exception as e:
        print(f"[!] Error: {e}")

if _name_ == "_main_":
Â Â Â Â main()


SECURITY FEATURES--
---

## ðŸ›¡ SECURITY NOTES
- Uses PBKDF2HMAC with 100k iterations for secure key derivation.
- Salt + IV are stored with the ciphertext (first 32 bytes).
- CFB mode allows variable-size data encryption without padding.

---
